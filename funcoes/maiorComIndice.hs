{-
Defina uma fun√ß√£o que, dada uma lista num√©rica, retorne uma tupla
que contenha o maior da lista bem como sua posi√ß√£o relativa.
-}

maiorComIndice :: (Ord a) => [a] -> (a, Int)
maiorComIndice xs = maximumByIndex (zip xs [0..])
  where
    maximumByIndex :: (Ord a) => [(a, Int)] -> (a, Int)
    maximumByIndex = foldl1 (\(v1, i1) (v2, i2) -> if v1 >= v2 then (v1, i1) else (v2, i2))

{-
EXPLICA√á√ÉO:
maiorComIndice :: (Ord a) => [a] -> (a, Int)
Isso √© a assinatura da fun√ß√£o. Diz que:
A fun√ß√£o maiorComIndice recebe uma lista de qualquer tipo a.
Esse tipo a precisa ser orden√°vel (Ord a) ‚Äî ou seja, pode usar > ou <.
Ela retorna uma tupla (a, Int) ‚Üí o maior valor da lista e sua posi√ß√£o.

maiorComIndice xs = maximumByIndex (zip xs [0..])

xs √© a lista de entrada.
zip xs [0..]:
Combina cada elemento da lista com seu √≠ndice.
Exemplo: zip [7, 4, 10] [0,1,2] ‚Üí [(7,0), (4,1), (10,2)]
Resultado: uma lista de tuplas (valor, posi√ß√£o)
Chamamos maximumByIndex para encontrar, entre essas tuplas, a que tem o maior valor.

maximumByIndex :: (Ord a) => [(a, Int)] -> (a, Int)
√â a assinatura da fun√ß√£o auxiliar maximumByIndex.
Ela recebe uma lista de tuplas (valor, √≠ndice) e devolve a tupla com o maior valor.

maximumByIndex = foldl1 (\(v1, i1) (v2, i2) -> if v1 >= v2 then (v1, i1) else (v2, i2))
Vamos quebrar isso:
üß© foldl1: Essa fun√ß√£o reduz a lista de valores para um √∫nico valor, aplicando uma opera√ß√£o entre os elementos.
Aqui, est√° comparando pares (valor, √≠ndice).
üß© A fun√ß√£o lambda: \(v1, i1) (v2, i2) -> if v1 >= v2 then (v1, i1) else (v2, i2)
Recebe dois pares: (valor1, √≠ndice1) e (valor2, √≠ndice2)
Compara os valores (v1 e v2)
Se v1 >= v2, mant√©m o primeiro
Sen√£o, mant√©m o segundo
Ou seja: vai passando por cada par e mantendo aquele com o maior valor.

-}